generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  auth_provider     EnumAuthProvider @default(EMAIL)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  email             String           @unique
  hash              String?
  verification_code String?
  name              String
  birth_date        String?
  gender            String
  username          String           @unique
  avatar            String?
  bio               String?
  received          Friendship[]     @relation("Receiver")
  sent              Friendship[]     @relation("Sender")
  runs              Run[]

  @@map("users")
}

model Friendship {
  id         String                 @id @default(uuid())
  status     EnumRelationshipStatus @default(PENDING)
  senderId   Int
  receiverId Int
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  receiver   User                   @relation("Receiver", fields: [receiverId], references: [id])
  sender     User                   @relation("Sender", fields: [senderId], references: [id])

  @@map("friendships")
}

model Run {
  id                        Int      @id @default(autoincrement())
  userId                    Int
  user                      User     @relation(fields: [userId], references: [id])
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  calories_burned           Int      @default(0)
  elevation_gain            Int      @default(0)
  heart_rate_avg            Int?
  temperature               Int?
  terrain                   String?
  weather                   String?
  notes                     String?
  title                     String
  started_at                DateTime
  completed_at              DateTime
  coordinates_count         Int
  first_coordinate_lat      Float
  first_coordinate_lng      Float
  last_coordinate_lat       Float
  last_coordinate_lng       Float
  pauses_count              Int
  distance                  Int
  distance_pauses_included  Int
  duration                  Int
  duration_pauses_included  Int
  avg_speed                 Float
  avg_speed_pauses_included Float
  coordinates               String // TODO: use JSON

  @@map("runs")
}

// TODO: set all the necessary Enums

enum EnumRelationshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}
enum EnumAuthProvider {
  EMAIL
  GOOGLE
}
